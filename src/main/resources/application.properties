#Spring Data source builder
spring.datasource.hikari.connectionTimeout=60000
spring.datasource.hikari.idleTimeout=30000
spring.datasource.hikari.maximumPoolSize=3
spring.datasource.hikari.minimumIdle=0

#Hibernate
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
spring.jpa.hibernate.show_sql = false
spring.jpa.hibernate.format_sql = true
spring.jpa.hibernate.ddl-auto = update

#Used for testing to pause the read from upstream
READ_FEED = 1 
TMPFEED_FILE_FOLDER = /tmp

#only needed by Grunberg whatsapps.  Their images url and image are not compatible to wassenger.
#need to conver and shrink and use ebay.gruenbergwatches.com to form the proper file extension of jpg
do_heic_to_jpg_convert=true
is_sync_images_by_downloading=true
#This is the url that wassenger api and shopify api will use to read the images.
css.hosting.url.base=http://ebay.gruenbergwatches.com/gwebaycss

#convert api token, must be filled if we are doing heic conversion
convert_api.secret=secret_ET2D5kSqVeH4MYho
convert_api.token=token_CLqSfQNp

#Feed readyness url
SHOULD_CHECK_GW_FEED_READYNESS=true
GW_FEED_READYNESS_URL=https://fm.gruenbergwatches.com/fmi/xml/fmresultset.xml?-db=DEG&-lay=CHECK_WEB_REFRESH&-findall

#Image store folder
image.store.dir = /datashare/gwebaycss/images/watches
image.source.ip = fm.gruenbergwatches.com

#Email
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.username=justin@gruenbergwholesale.com
spring.mail.password=vnpbrgfmwxqdlfbs
email.from=noreply-ebaybot@gruenbergwatches.com
email.to=noreply-ebaybot@gruenbergwatches.com

#Dev mode
dev.mode=0
dev.mode.maxReadCount = 10
dev.mode.specificSku =

#Chronos24 selenium impl
web.driver.type = htmlunitdriver
#web.driver.type = chromedriver
web.driver.path  = src/main/resources/seleniumdrivers/chromedriver

######## EBAY DEFAULT PROPERTIES
# Ebay developer api console: https://developer.ebay.com/my/keys
#Sandbox app
APP_ID = none
SERVER_URL = https://api.sandbox.ebay.com/wsapi
SERVER_KEY= none

# Ebay sandbox console: http://sandbox.ebay.com/  
# Account->my account->Business Policies, the ids are in the url.  for example profileId=5373972000
# SandBox policies
PAYMENT_POLICY_ID = none
SHIPPING_POLICY_ID = none
RETURN_POLICY_ID = none
PAYMENT_POLICY_ID_NO_IMMEDIATE = none

######## SHOPIFY DEFAULT PROPERTIES
#Sandbox app
SHOPIFY_REST_URL = none
SHOPIFY_AUTH_USER = none
SHOPIFY_AUTH_PASSWD = none
SHOPIFY_ADMIN_API_VERSION = 2022-01
shopify.force.update = 0

ftl.template.file = keystone.ftl


MAX_TO_DELETE_COUNT = 10000

#Jomashop JWT
jwt.token_request_url = none
jwt.user = none
jwt.password = none
jomashop.api.baseurl = none
FORCE_UPDATE = 1

#Email
spring.mail.username=911@911.com
spring.mail.password=911
email.alert.enabled=0

email.alert.shopify.publish.enabled=1
email.alert.shopify.publish.send.to=911@911.com

#Scheduled Rate
#cron.schedule=1 */10 1 1 1 MON-FRI
#cron.zone=America/Los_Angeles

#Place holder for an impossible schedule
cron.schedule=0 0 0 31 2 ?
cron.zone=America/Los_Angeles



#Google Service
#Service account credential.json
google.service.credential.json.path=/Users/jyuan/Documents/justin/gwbot/yuanja888-google-boneta-service-account.json

#Link to the google sheet that contains the schedule
#assuming the google service account has access to the sheet
google.sheet.schedule.url=https://docs.google.com/spreadsheets/d/1-_9000000000000000000000000000000000000000/edit?gid=0
google.sheet.schedule.sheet.name=Schedule
google.sheet.item.sheet.name=Active Item

spring.batch.jdbc.initialize-schema=always
spring.batch.job.enabled=false
